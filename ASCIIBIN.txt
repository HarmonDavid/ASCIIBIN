/* I’m not sure what to use the first 32 chars for as of yet. I’m not working in V, so I will likely 
have to convert it to sending command code to Bash or ZSH, but that would have to require some sort of 
custom training to get that working, and that and will require some thought.

I decided to build this so we can establish a lowest common denominator for a databases for ML libraries 
to be built on for those of use not equipped with a billion dollars worth of server room, and wanting 
to building something that all operating systems can use. (OpenBSD, looking at you.)

I chose this set of ASCII, because you can basically write the entirety of the open source world 
using this character set and C. You can even write most of Julia and Python in it as well, so it fits my personal needs.

This is the seven bit binary table compiled with the ASCII character in a text format for an 
easy strip and build. I will update this at a later date when I have more than just a lookup table 
done, which I already have a C library built that does the cross conversion for the later part of this 
dataset. I will update this page with that binary later.

Long term, I intend to build an entire command module that will be used to direct models and it 
will be used to apply this lookup table. I’m not going into specifics about this at this point.*/



000 0000000 Null character
001 0000001 SOH Start of Heading
002 0000010 STX Start of Text
003 0000011 ETX End of Text
004 0000100 EOT End of Transmission
005 0000101 ENQ Enquiry
006 0000110 ACK Acknowledge
007 0000111 BEL Bell, Alert
008 0001000 BS Backspace
009 0001001 HT Horizontal Tab
010 0001010 LF Line Feed
011 0001011 VT Vertical Tabulation
012 0001100 FF Form Feed
013 0001101 CR Carriage Return
014 0001110 SO Shift Out
015 0001111 SI Shift In
016 0010000 DLE Data Link Escape
017 0010001 DC1 Device Control One (XON)
018 0010010 DC2 Device Control Two
019 0010011 DC3 Device Control Three(XOFF)
020 0010100 DC4 Device Control Four
021 0010101 NAK Negative Acknowledge
022 0010110 SYN Synchronous Idle
023 0010111 ETB End of Transmission Block
024 0011000 CAN Cancel
025 0011001 EM	End of medium
026 0011010 SUB Substitute
027 0011011 ESC Escape
028 0011100 FS File Separator
029 0011101 GS Group Separator
030 0011110 RS Record Separator
031 0011111 US	Unit Separator

ASCII text:
032 0100000 Space
033 0100001 !
034 0100010 "	
035 0100011 #
036 0100100 $
037 0100101 %
038 0100110 &
039 0100111 '
040 0101000 (
041 0101001 )
042 0101010 *
043 0101011 +
044 0101100 ,
045 0101101 -
046 0101110 .
047 0101111 /
048 0110000 0
049 0110001 1
050 0110010 2
051 0110011 3
052 0110100 4
053 0110101 5
054 0110110 6
055 0110111 7
056 0111000 8
057 0111001 9
058 0111010 :
059 0111011 ;
060 0111100 <
061 0111101 =
062 0111110 >
063 0111111 ?
064 1000000 @
065 1000001 A
066 1000010 B
067 1000011 C
068 1000100 D
069 1000101 E
070 1000110 F
071 1000111 G
072 1001000 H
073 1001001 I
074 1001010 J
075 1001011 K
076 1001100 L
077 1001101 M
078 1001110 N
079 1001111 O
080 1010000 P
081 1010001 Q
082 1010010 R
083 1010011 S
084 1010100 T
085 1010101 U
086 1010110 V
087 1010111 W
088 1011000 X
089 1011001 Y
090 1011010 Z
091 1011011 [
092 1011100 \
093 1011101 ]
094 1011110 ^
095 1011111 _
096 1100000 `
097 1100001 a
098 1100010 b
099 1100011 c
100 1100100 d
101 1100101 e
102 1100110 f
103 1100111 g
104 1101000 h
105 1101001 i
106 1101010 j
107 1101011 k
108 1101100 l
109 1101101 m
110 1101110 n
111 1101111 o
112 1110000 p
113 1110001 q
114 1110010 r
115 1110011 s
116 1110100 t
117 1110101 u
118 1110110 v
119 1110111 w
120 1111000 x
121 1111001 y
122 1111010 z
123 1111011 { Opening brace
124 1111100 | Vertical bar
125 1111101 } Closing brace
126 1111110 ~ - tilde
127 1111111 Delete
